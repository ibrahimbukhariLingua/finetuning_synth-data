Shelfware


# Shelfware



**Shelfware** at one time referred to binders of unused documentation and at present refers to unused software. It also refers to security and other policies and procedures that fill an "array of binders" collecting dust. The highest-risk definition of *shelfware* is security software, purchased to fill an identified weakness, sitting uninstalled on a shelf. Another aspect is the opportunity cost for software that will ultimately go totally unused.


## Overview

*Shelfware* in the form of money spent on licensing more "seats" than needed "cuts into the bottom line." The term was used
in prior decades for what IBM and others also called "Binderware" (referring paper-based documentation). With more software being licensed per unit of time, rather than purchased or on perpetual license, a delayed project for which specialized software was procured results in extra cost overruns. An alternative to pre-payment for what becomes unused software is via a pay-per-use/software-as-a-service arrangement.

One consulting company considered it a small percentage, compared to "the $3.6 trillion in worldwide IT spending forecasted" for the following year. Not all unused software, however, should be considered *shelfware* - in particular that which could be considered unintentional. An example is the case of Microsoft's SharePoint, since bundled with it was a *Client Access License* (CAL). *Computerworld* cited an industry analyst as saying that "a lot of customers didn't know" and hence regarding CAL "never deploy the software." A subsequent survey, also cited in the article, said that less than 70% actually made full use of that for which their company paid: Shelfware by accident.

A 2016 survey as to whether software companies should give feedback when they become aware of shelfware overspending found the majority finding this feedback not to be "a risk to recurring revenue" in the long run.


## Double spending

When an IT department buys a bundle of software that includes a specific functionality, and a user department is unwilling to wait for this software, and buys the same functionality elsewhere, the IT purchase will go unused: shelfware.

Even when not paying double, shelfware raises the effective price-per-copy. Microsoft and others have used CRM techniques "to get it from being 'shelfware' to get people .. to use it." Unsold copies of software sitting in stores can become *shelfware*.

When several projects, each lasting several months, have different start and end months, licensing by transferable "seat months" is a way of reducing paying for unused software. A related idea is the software subscription model, which Oracle Corporation CEO Larry Ellison tied to two other marketing concepts: fashions in women's clothing and two computing alternatives to *FUD*/Vaporware: Grid Computing and SaaS

Following major layoffs during the 2008 drop in the economy, some companies found themselves keeping this double-spending effect: both IT and the department did not have the institutional memory that would justify canceling renewals. Earlier regulatory requirements contributed to both kinds of shelfware.

Software purchases, when bought for doing evaluations, even when expensive, are *shelfware* following evaluation, but keeping them may be easier than getting them off the company's property records.


## Binderware

The term *shelfware* originated before the internet, and it referred to reams of paper documentation. When the number of pages became beyond what could be stapled, they were stored in loose-leaf binders: *binderware*. One columnist wrote that overly complicated diagrams and graphics were "more likely it is to become shelfware."

Some of these documents were not even for implemented software, but for planning of projects that were "shelved" (not implemented).

