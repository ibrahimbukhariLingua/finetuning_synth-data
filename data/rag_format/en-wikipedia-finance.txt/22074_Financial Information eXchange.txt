Financial Information eXchange


# Financial Information eXchange



The **Financial Information eXchange** (**FIX**) protocol is an electronic communications protocol initiated in 1992 for international real-time exchange of information related to securities transactions and markets. With trillions of dollars traded annually on the NASDAQ alone, financial service entities are employing direct market access (DMA) to increase their speed to financial markets. Managing the delivery of trading applications and keeping latency low increasingly requires an understanding of the FIX protocol.


## History

The FIX protocol specification was originally authored in 1992 by Robert "Bob" Lamoureux and Chris Morstatt to enable electronic communication of equity trading data between Fidelity Investments and Salomon Brothers. FIX initially addressed information between broker-dealers and their institutional clients. At the time, this information was communicated verbally over the telephone. Fidelity realized that information from their broker-dealers could be routed to the wrong trader, or simply lost when the parties hung up their phones. It wanted such communications to be replaced with machine-readable data which could then be shared among traders, analyzed, acted on and stored. For example, broker-dealers call with an indication of interest (IOI) to buy or sell a block of stock. The FIX initiative created new messages such as the IOI.

According to the FIX Trading Community, FIX has become the de facto messaging standard for pre-trade and trade communication in the global equity markets, and is expanding into the post-trade space to support straight-through processing, as well as continuing to expand into foreign exchange, fixed income and derivatives markets.


### FIX Trading Community

The FIX Trading Community is a non-profit, industry-driven standards body with a mission to address the business and regulatory issues impacting multi-asset trading across the global financial markets through the increased use of standards, including the FIX Protocol messaging language, delivering operational efficiency, increased transparency, and reduced costs and risk for all market participants.


## Users

FIX is widely used by both the buy side (institutions) as well as the sell side (brokers/dealers) of the financial markets. Among its users are mutual funds, investment banks, brokers, stock exchanges and ECNs.

FIX has become the standard electronic protocol for pre-trade communications and trade execution. Although it is mainly used for equity transactions in the front office area, bond derivatives and FX-transactions are also possible. One could say that whereas SWIFT is the standard for back office messaging, FIX is the standard for front office messaging. However, today, the membership of FIX Protocol Ltd. is extending FIX into block trade allocation and other phases of the trading process, in every market, for virtually every asset class.


## Technical specifications

Originally, the FIX standard was monolithic, including application layer semantics, message encoding, and session layer in a single technical specification. It remained monolithic through FIX version 4.2. Thereafter, message encodings and session layer specifications began to be split into separate documents, and ultimately, FIX evolved into a family of related technical standards.


### Message encodings

Message encoding, called Presentation Layer in the Open Systems Interconnection model (OSI model), is responsible for the wire format of messages.


#### Tagvalue encoding (classic FIX)

The original FIX message encoding is known as tagvalue encoding. Each field consists of a unique numeric tag and a value. The tag identifies the field semantically. Therefore, messages are self-describing. Tagvalue encoding is character-based, using ASCII codes.


##### FIX tagvalue message format

A message is composed of a header, a body, and a trailer. The message fields are separated by the start of heading (SOH) character (ASCII 0x01).

Up to FIX.4.4, the header contains three fields: 8 (`BeginString`), 9 (`BodyLength`), and 35 (`MsgType`).

From FIXT.1.1 / FIX.5.0, the header contains five or six fields: 8 (`BeginString`), 9 (`BodyLength`), 35 (`MsgType`), 49 (`SenderCompID`), 56 (`TargetCompID`) and the optional 1128 (`ApplVerID`).

The content of the message body is defined by the message type (35 `MsgType`) in the header.

The trailer contains the last field of the message, 10 (`Checksum`), always expressed as a three-digit number (e.g. `10=002`).

Example of a FIX message, Execution Report (`35=8`), with the pipe character (`|`) representing the SOH character:


##### Body

FIX messages are formed from several fields; each field has a tag value pairing that is separated from the next field by a delimiter SOH (0x01). The tag is an integer that indicates the meaning of the field. The value is an array of bytes that hold a specific meaning for the particular tag (e.g. tag 48 is SecurityID, a string that identifies the security; tag 22 is IDSource, an integer that indicates the identifier class being used). The values may be in plain text or encoded as pure binary (in which case the value is preceded by a length field). The FIX protocol defines meanings for most tags, but leaves a range of tags reserved for private use between consenting parties.

The FIX protocol also defines sets of fields that make a particular message; within the set of fields, some will be mandatory and others optional. The ordering of fields within the message is generally unimportant, however repeating groups are preceded by a count and encrypted fields are preceded by their length. The message is broken into three distinct sections: the head, body and tail. Fields must remain within the correct section and within each section, the position may be important as fields can act as delimiters that stop one message from running into the next. The final field in any FIX message is tag 10 (checksum).

There are two main groups of messagesâ€”admin and application. The admin messages handle the basics of a FIX session. They allow for a session to be started and terminated and for recovery of missed messages. The application messages deal with the sending and receiving of trade-related information such as an order request or information on the current state and subsequent execution of that order.


##### Body length

The body length is the character count starting at tag 35 (included) all the way to tag 10 (excluded), including trailing SOH delimiters.
The example below (displayed with SOH delimiters as '|') has a body length of 65:



##### Checksum

The checksum of a FIX message is always the last field in the message, with tag `10` and a 3 character value. It is given by summing the ASCII value of all characters in the message (except for the checksum field itself), then modulo 256. For example, in the message above, the summation of all ASCII values (including the SOH characters with ASCII value 1) results in 4158. Performing the modulo operation gives the value 62. Since the checksum is composed of three characters, this results in `10=062`.


#### FIXML

FIXML is an XML schema for FIX messages. It is semantically equivalent to tagvalue encoded messages but takes advantage of XML parser technology. FIXML is commonly used for back-office and clearing applications rather than trading.


#### Simple Binary Encoding (SBE)

Simple Binary Encoding defines a wire format using primitive data types that are native to computing systems. Message encoding and decoding is therefore much lower latency than character-based protocols since no translation is needed to put data into a format that computers can use. Aside from latency advantages, performance is more deterministic because SBE messages are constrained by templates and fixed-length data elements are preferred. Another consequence is that fields are generally at a fixed position so that message filters and routers do not need to crack an entire message to access key fields.

SBE was developed by the FIX High Performance Working Group to support high performance trading. Tagvalue encoding was deemed no longer fit-for-purpose since it is character based rather than binary and its variable-length fields and messages result in non-deterministic performance.

Unlike tagvalue and FIXML, an SBE message is not self-describing. Only data is sent on the wire with a minimal header to identify the template that controls a message. Metadata that describes a message layout is exchanged out-of-band between peers.

FIX Trading Community publishes an XML schema for SBE message schemas. A message schema may contain any number of message templates. A template describes the fields that constitute a message. Additionally, a schema provides a listing of simple and composite data types that may be reused by any number of fields.

From a practical perspective, assuming a C/C++ implementation, and adjusting for endianness: most non-composite types in the message directly map to the same type in the language. For example, 32-bit integer maps to `uint32_t`, fixed strings maps `const char *`, floating point maps to `float` and so on. One can generate a C/C++ `struct` from the schema definition. Then, given a pointer to a message buffer, accessing non-composite fields of the message amount to type-casting it to a pointer to structure and accessing structure members directly.


#### Other FIX encodings

FIX Trading Community has also developed standard mappings between FIX and other message protocols, including:

* Google Protocol Buffers
* ASN.1
* JSON

### Session protocols

The session layer is responsible for message exchange including checkpoint recovery mechanisms.


#### FIX Transport (FIXT)

The original FIX session protocol did not have its own name since it was part of a monolithic specification covering application layer semantics and message encoding as well. However, starting with FIX version 5.0, the session layer was split off as an independent specification with the introduction of FIXT. FIXT was largely the same as the original unnamed session layer in version 4.x, but it offered one significant innovation--it provided a mechanism to mix FIX application layer versions over a common session version. The current FIXT version is 1.1.

Theoretically, FIXT is transport independent. However, it is usually employed over Transmission Control Protocol (TCP).

FIXT is a point-to-point protocol. It guarantees message delivery in both directions. Messages sent in each direction carry a message sequence number in the message header. If there is a communication fault, a peer may request retransmission of missed messages. Message delivery is supported even in the event of disconnection and later reestablishment of a session.

To implement session establishment and guaranteed delivery, FIXT and classic FIX 4.x define these session message types:

* Heartbeat
* Test Request
* ResendRequest
* Reject
* SequenceReset
* Logout
* Logon
* XMLnonFIX

#### FIX Performance Session Layer (FIXP)

FIXP was developed by the FIX High Performance Working Group to meet the needs of high performance trading. The primary need is for low latency message encoding and decoding and control over message delivery guarantees.

To provide low latency, binary message encodings are supported both for session layer and application messages. The actual wire format is abstracted in the FIXP specification, so users may select a FIX encoding of their choice, so long as peers agree on a protocol to use. Early development has used Simple Binary Encoding.

FIXP covers both point-to-point and multicast use cases with common primitives.

When a point-to-point session is established, peers negotiate delivery guarantees from among the following choices:

* Recoverable: exactly-once message delivery. If gaps are detected, then missed messages may be recovered by retransmission.
* Idempotent: at-most-once delivery. If gaps are detected, the sender is notified, but recovery is under the control of the application, if it is done at all.
* Unsequenced: makes no delivery guarantees. This choice is appropriate if guarantees are unnecessary or if recovery is provided at the application layer or through a different communication channel.
* Note: No application messages should be sent in one direction of a session.

Delivery guarantees may be asymmetrical. For example, a trader may enter orders over an idempotent flow while executions are returned over a recoverable flow. In fast moving markets, the delay inherent in retransmission is often undesirable, resulting in missed opportunities or bad trades.


## Diagrammatic representation of FIX system

Below is a diagram of how to FIX messaging looks between Buyside/Customer and Sellside/Supplier.


## Latest developments in FIX protocol

The latest version of FIX Protocol implements "Transport Independence" by permitting multiple versions of application messages to be carried over a single version of Transport Independent FIX Session (FIXT.1.1 and higher).

Transport Independence also paves the way for transport protocols such as message queues and web services to be used instead of traditional FIX over TCP.

FIX now supports algorithmic trading by the use of FIX Algorithmic Trading Definition Language FIXatdl.

In 2005, the FIX Trading Community released FAST protocol which stands for FIX Adapted for Streaming. FAST is a binary protocol and is used mostly for sending Multicast market data via UDP connections.

Further, in 2020, the FIX Trading Community released a new FIX binary encoding, based on Simple Binary Encoding (SBE), meant to complement the existing FAST encoding.

