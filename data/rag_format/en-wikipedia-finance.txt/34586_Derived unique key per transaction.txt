Derived unique key per transaction


# Derived unique key per transaction



In cryptography, **Derived Unique Key Per Transaction** (**DUKPT**) is a key management scheme in which for every transaction, a unique key is used which is derived from a fixed key. Therefore, if a derived key is compromised, future and past transaction data are still protected since the next or prior keys cannot be determined easily.

The current (as of May 2024) version of the standard (ANSI X9.24-3-2017) was released in 2017. It is based on the AES encryption algorithm and is recommended for new implementations.

This article is about the original variant of DUKPT that is based on the TDEA encryption algorithm and is described in the Appendix C of ANSI X9.24-3-2017.


## Overview

DUKPT allows the processing of the encryption to be moved away from the devices that hold the shared secret. The encryption is done with a *derived* key, which is not re-used after the transaction. DUKPT is used to encrypt electronic commerce transactions. While it can be used to protect information between two companies or banks, it is typically used to encrypt PIN information acquired by Point-Of-Sale (POS) devices.

DUKPT is not itself an encryption standard; rather it is a key management technique. The features of the DUKPT scheme are:

* enable both originating and receiving parties to be in agreement as to the key being used for a given transaction,
* each transaction will have a distinct key from all other transactions, except by coincidence,
* if a present derived key is compromised, past and future keys (and thus the transactional data encrypted under them) remain uncompromised,
* each device generates a different key sequence,
* originators and receivers of encrypted messages do not have to perform an interactive key-agreement protocol beforehand.

## History

DUKPT was invented in the late 1980s at Visa but didn't receive much acceptance until the 1990s, when industry practices shifted towards recommending, and later requiring, that each device have a distinct encryption key.

Before DUKPT, state of the art was known as Master/Session, which required every PIN-encrypting device to be initialized with a unique master key. In handling transactions originating from devices using Master/Session key management, an unwanted side effect was the need for a table of encryption keys as numerous as the devices deployed. At a major merchant acquirer the table could become quite large indeed. DUKPT resolved this. In DUKPT each device is still initialized with a distinct key, but all of the initialization keys of an entire family of devices are derived from a single key, the base derivation key (BDK). To decrypt encrypted messages from devices in the field, the recipient need only store the BDK.


## Keys

As stated above, the algorithm needs an initial single key which in the original description of the algorithm was called the ***super-secret key***, but was later renamed to—in a more official-sounding way—**Base Derivation Key** (or BDK). The original name perhaps conveys better the true nature of this key, because if it is compromised then all devices and all transactions are similarly compromised.

This is mitigated by the fact that there are only two parties that know the BDK:

* the recipient of the encrypted messages (typically a merchant acquirer)
* the party which initializes the encryption devices (typically the manufacturer of the device).

The BDK is usually stored inside a tamper-resistant security module (TRSM), or hardware security module (HSM). It must remain clear that this key is not the one used to initialize the encryption device that will participate in DUKPT operations. See below for the actual encryption key generation process.

* *First*: A key derived from the BDK, this is known as the IPEK (Initial PIN Encryption Key)
* *Second*: The IPEK is then injected into the devices, so any compromise of that key compromises only the device, not the BDK. This creates yet another set of keys (inside the device) irreversibly derived from it (nominally called the *Future Keys*)
* *Fourth*: Afterwards the IPEK is then immediately discarded. *NOTE: This step contradicts "Session Keys" section where it indicates that only 21 "Future Keys" are generated. The IPEK must be retained by the terminal in order generate the next batch of 21 Future Keys. NOTE: This isn't true, the future keys are used to derive new future keys, the IPEK is in fact discarded.*
* *Fifth*: Future Keys are used to encrypt transactions in the DUKPT process.

Upon detection of compromise the device itself derives a new key via the Derived Key Generation Process.


## Communication


### Origination

On the originating (encrypting) end, the system works as follows:

1. A transaction is initiated which involves data to be encrypted. The typical case is a customer's PIN.
2. A key is retrieved from the set of “Future Keys”
3. This is used to encrypt the message, creating a cryptogram.
4. An identifier known as the “Key Serial Number” (KSN) is returned from the encrypting device, along with the cryptogram. The KSN is formed from the device's unique identifier, and an internal transaction counter.
5. The (cryptogram, KSN) pair is forwarded on to the intended recipient, typically the merchant acquirer, where it is decrypted and processed further.
6. Internally, the device does the following:
 1. Increments the transaction count (using an internal counter)
 2. Invalidates the key just used, and
 3. If necessary generates more future keys

### Receiving

On the receiving (decrypting) end, the system works as follows:

1. The (cryptogram, KSN) pair are received.
2. The appropriate BDK (if the system has more than one) is located.
3. The receiving system first regenerates the IPEK, and then goes through a process similar to that used on the originating system to arrive at the same encrypting key that was used (the session key). The Key Serial Number (KSN) provides the information needed to do this.
4. The cryptogram is decrypted with session key.
5. Any further processing is done. For merchant acquirers, this usually means encrypting under another key to forward on to a switch (doing a “translate”), but for certain closed-loop operations may involve directly processing the data, such as verifying the PIN.

## Session Keys

The method for arriving at session keys is somewhat different on the originating side as it is on the receiving side. On the originating side, there is considerable state information retained between transactions, including a transaction counter, a serial number, and an array of up to 21 “Future Keys”. On the receiving side there is no state information retained; only the BDK is persistent across processing operations. This arrangement provides convenience to the receiver (a large number of devices may be serviced while only storing one key). It also provides some additional security with respect to the originator (PIN capture devices are often deployed in security-averse environments; the security parameters in the devices are ‘distant’ from the sensitive BDK, and if the device is compromised, other devices are not implicitly compromised).


## Registers Usage


### Backup Registers

The following storage areas relating to key management are maintained from the time of the "Load Initial Key" command for the life of the PIN Entry Device:


#### Encryption Counter (21 bits)

A counter of the number of PIN encryptions that have occurred since the PIN Entry Device was first initialized. Certain counter values are skipped (as explained below), so that over 1 million PIN encryption operations are possible. Note: The concatenation (left to right) of the Initial Key Serial Number Register and the Encryption Counter form the 80-bit (20 hexadecimal digits) Key Serial Number Register.


#### Future Key Registers (21 registers of 34 hexadecimal digits each)

A set of 21 registers, numbered #1 to #21, used to store future PIN encryption keys. Each register includes a 2 hexadecimal digit longitudinal redundancy check (LRC) or a 2 hexadecimal digit cyclical redundancy check (CRC).


### Temporary Registers

The following storage areas relating to key management are required on a temporary basis and may be used for other purposes by other PIN processing routines:


#### Current Key Pointer (approximately 4 hexadecimal digits)

Contains the address of that Future Key Register whose contents are being used in the current cryptographic operation. It identifies the contents of that Future Key Register whose address is contained in the Current Key Pointer.


#### Shift Register (21 bits)

A 21-bit register, whose bits are numbered left to right as #1 to #21. This register normally contains 20 "zero" bits and a single "one" bit. One use of this register is to select one of the Future Key Registers. The Future Key
Register to be selected is the one numbered identically to the bit in the Shift Register containing the single "one".


#### Crypto Register-1 (16 hexadecimal digits)

A register used in performing cryptographic operations.


#### Crypto Register-2 (16 hexadecimal digits)

A second register used in performing cryptographic operations.


#### Key Register (32 hexadecimal digits)

A register used to hold a cryptographic key.


## Practical Matters (KSN scheme)

In practical applications, one would have several BDKs on record, possibly for different customers, or to contain the scope of key compromise. When processing transactions, it is important for the receiver to know which BDK was used to initialize the originating device. To achieve this, the 80-bit KSN is structured into three parts: as Key Set ID, a TRSM ID, and the transaction counter. The algorithm specifies that the transaction counter is 21-bits, but treats the remaining 59 bits opaquely (the algorithm only specifies that unused bits be 0-padded to a nibble boundary, and then 'f' padded to the 80-bit boundary). Because of this, the entity managing the creation of the DUKPT devices (typically a merchant acquirer) is free to subdivide the 59 bits according to their preference.

The industry practice is to designate the partitioning as a series of three digits, indicating the number of hex digits used in each part: the Key Set ID, the TRSM ID, and the transaction counter. A common choice is '6-5-5', meaning that the first 6 hex digits of the KSN indicate the Key Set ID (i.e., which BDK is to be used), the next 5 are the TRSM ID (i.e. a device serial number within the range being initialized via a common BDK), and the last 5 are the transaction counter.

This notational scheme is not strictly accurate, because the transaction counter is 21 bits, which is not an even multiple of 4 (the number of bits in a hex digit). Consequently, the transaction counter actually consumes one bit of the field that is the TRSM ID (in this example that means that the TRSM ID field can accommodate 2(⁵\*⁴-¹) devices, instead of 2(⁵\*⁴), or about half a million).

Also, it is common practice in the industry to use only 64-bits of the KSN (probably for reasons pertinent to legacy systems, and DES encryption), which would imply that the full KSN is padded to the left with four ‘f’ hex digits. The remaining 4 hex digits (16-bits) are available, nonetheless, to systems which can accommodate them.

The 6-5-5 scheme mentioned above would permit about 16 million BDKs, 500,000 devices per BDK, and 1 million transactions per device.

